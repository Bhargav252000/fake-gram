{"version":3,"sources":["components/Title.js","firebase/config.js","hooks/useStorage.js","components/ProgressBar.js","components/UploadForm.js","hooks/useFirestore.js","components/ImageGrid.js","components/Modal.js","App.js","index.js"],"names":["Title","className","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","projectStorage","projectFirestore","timestamp","FieldValue","serverTimestamp","useStorage","file","useState","progress","setProgress","error","setError","url","setUrl","useEffect","storageRef","ref","name","collectionRef","collection","put","on","snap","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","div","initial","width","animate","UploadForm","types","type","onChange","e","selected","target","files","includes","useFirestore","docs","setDocs","unsub","orderBy","onSnapshot","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImage","map","whileHover","opacity","layout","key","onClick","docUrl","classList","contains","handleClick","title","delete","deleteItem","img","src","alt","transition","delay","Modal","selectedImage","y","App","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.8897702b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Title = () => {\r\n    return(\r\n        <div className = \"title\">\r\n            <h1>FakeGram</h1>\r\n            <h2>Your Pictures</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Title;\r\n","import * as firebase from 'firebase/app'\r\nimport 'firebase/storage'\r\nimport 'firebase/firestore'\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBb53K68JNS4BUgQyxSwJBP26OnL-GnEz8\",\r\n    authDomain: \"fakegram-f063f.firebaseapp.com\",\r\n    databaseURL: \"https://fakegram-f063f.firebaseio.com\",\r\n    projectId: \"fakegram-f063f\",\r\n    storageBucket: \"fakegram-f063f.appspot.com\",\r\n    messagingSenderId: \"645309976418\",\r\n    appId: \"1:645309976418:web:831504569c6e7370e2263b\"\r\n  };\r\n  // Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n\r\nconst projectStorage = firebase.storage();\r\nconst projectFirestore = firebase.firestore();\r\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\nexport { projectStorage, projectFirestore, timestamp };\r\n\r\n\r\n","import { useState, useEffect } from 'react'\r\nimport { projectStorage, projectFirestore,timestamp } from '../firebase/config'\r\n\r\n//Custom Hook : useStorage();\r\n\r\n\r\nconst useStorage = (file) => {\r\n    const [progress,setProgress] = useState(null);\r\n    const [error,setError] = useState(null);\r\n    const [url,setUrl] = useState(null);\r\n\r\n    //Everytime the file is changed the useEfect function is called,\r\n    // The the Information Of the File is send t the Database and storage in the Firebase\r\n\r\n    useEffect(() => {\r\n        // references\r\n        const storageRef = projectStorage.ref(file.name);   // Reference for the Storage\r\n        const collectionRef = projectFirestore.collection('images');  //Reference for the Database \r\n\r\n        storageRef.put(file).on('state_changed', (snap) => {\r\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n            setProgress(percentage);\r\n        },(err) => {\r\n            setError(err);\r\n        }, async() => {  // when the file upload is finished we will take the URL of the image Uploaded\r\n            const url = await storageRef.getDownloadURL();\r\n            const createdAt = timestamp();\r\n            collectionRef.add({ url: url, createdAt }); // the database will have the two properties ie. first Time of creation and the the Url of the image\r\n            setUrl(url);\r\n        });\r\n        \r\n    },[file]);\r\n\r\n    return { progress, url, error }\r\n\r\n}\r\n\r\nexport default useStorage;\r\n","import React, { useEffect } from 'react'\r\nimport useStorage from '../hooks/useStorage'\r\nimport { motion } from 'framer-motion'\r\n\r\nconst ProgressBar = ({ file, setFile }) => {\r\n\r\n    const { progress, url } = useStorage(file);    // we get url and progress from the useStorage Hook that we create\r\n\r\n    //console.log(progress, url);\r\n    useEffect(() => {             // This useEffect() is for : when the upload is completed the progress bar removes autoatically\r\n        if(url){                  // We get the URL only when the File is uploaded fully.\r\n            setFile(null);        // And when we setFile(null)  the progressBar won't run as in Upload form the file paramete will null and progressBar will not run \r\n        }\r\n    }, [url, setFile])\r\n\r\n    return (\r\n        <motion.div className = \"progress-bar\" \r\n            initial = {{width: 0}}\r\n            animate = {{width: progress + '%'}}\r\n        >\r\n        </motion.div>\r\n    );\r\n}\r\n\r\nexport default ProgressBar;","import React, {useState} from 'react'\r\nimport ProgressBar from './ProgressBar'\r\n\r\n\r\nconst UploadForm = () => {\r\n\r\n    const [file, setFile] =  useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    const types = ['image/png', 'image/jpeg', 'image/jpg'];\r\n\r\n    const changeHandler = (e) => {\r\n        //console.log('changed');\r\n        let selected = e.target.files[0];   // to know the information of the file imported from the Computer\r\n        //console.log(selected);\r\n        if(selected && types.includes(selected.type)){\r\n            setFile(selected);\r\n            setError(null);\r\n        }else{\r\n            setFile(null);\r\n            setError('Please Select An Image File (png or jpeg)');\r\n        }\r\n    }\r\n\r\n    return(\r\n        <form>\r\n            <label>\r\n                <input type = \"file\" onChange = {changeHandler}/>\r\n                <span>+</span>\r\n            </label>\r\n            <div className = \"output\">\r\n                { error && <div className = \"error\"> {error} </div> }\r\n                { file && <div>{ file.name }</div> }\r\n                { file && <ProgressBar file = {file} setFile={setFile}/> }\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default UploadForm;\r\n","import { useState, useEffect } from 'react'\r\nimport { projectFirestore } from '../firebase/config'\r\n\r\n\r\nconst useFirestore = (collection) => {\r\n    const [docs,setDocs] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const unsub = projectFirestore\r\n            .collection(collection)\r\n            .orderBy('createdAt', 'desc')\r\n            .onSnapshot((snap) =>{\r\n                let documents = [];\r\n                snap.forEach(doc => {\r\n                    documents.push({...doc.data(), id: doc.id})\r\n                });\r\n                setDocs(documents);\r\n            });\r\n\r\n        return () => unsub();   //cleanup function\r\n    },[collection]);\r\n\r\n    return { docs }\r\n};\r\n\r\n\r\n\r\nexport default useFirestore;","import React from 'react'\r\nimport useFirestore from '../hooks/useFirestore'\r\nimport { motion } from 'framer-motion'\r\nimport { projectFirestore } from '../firebase/config'\r\n\r\nconst ImageGrid = ({ setSelectedImage }) => {\r\n\r\n    const { docs } = useFirestore('images');\r\n\r\n   const deleteItem = (id,e) => {\r\n       if(e.target.className === 'closes'){\r\n        setSelectedImage(null);\r\n            projectFirestore\r\n            .collection('images')\r\n            .doc(id)\r\n            .delete();\r\n       }\r\n   }\r\n\r\n    const handleClick = (docUrl,e) => {\r\n        if(!e.target.classList.contains('closes')) {\r\n            setSelectedImage(docUrl);\r\n        }\r\n    };\r\n\r\n    return(\r\n        <div className = \"img-grid\">\r\n            { docs && docs.map(doc => (\r\n                <motion.div \r\n                    whileHover = {{ opacity: 1}}\r\n                    layout\r\n                    className = \"img-wrap\" \r\n                    key={doc.id} \r\n                    onClick = {(e) => handleClick(doc.url,e)}\r\n                >\r\n                    <span  className =\"closes\" title=\"Delete\"\r\n                        onClick = {(e) => deleteItem(doc.id,e)}\r\n                    >&times;</span>\r\n                    <motion.img src = {doc.url} alt = \"uploaded pic\"\r\n                        initial = {{opacity: 0}}\r\n                        animate = {{opacity: 1}}\r\n                        transition = {{delay: 1}}\r\n                    />\r\n                </motion.div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default ImageGrid;\r\n","import React from 'react'\r\nimport { motion } from 'framer-motion'\r\n\r\nconst Modal = ({ selectedImage, setSelectedImage }) => {\r\n\r\n    const handleClick = (e) => {\r\n        if(e.target.classList.contains('backdrop')){\r\n            setSelectedImage(null);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <motion.div className = \"backdrop\" onClick = {handleClick}\r\n            initial =  {{ opacity: 0 }}\r\n            animate = {{ opacity : 1}}\r\n        >\r\n            <motion.img src={selectedImage} alt= \"enlarged Pic\" \r\n                initial={{y:\"100vh\"}}\r\n                animate={{y: 0}}\r\n            />\r\n        </motion.div>\r\n    );\r\n}\r\n\r\nexport default Modal;","import React, { useState } from 'react'\r\nimport Title from './components/Title'\r\nimport UploadForm from './components/UploadForm'\r\nimport ImageGrid from './components/ImageGrid'\r\nimport Modal from './components/Modal'\r\nconst App = () => {\r\n\r\n    const [selectedImage, setSelectedImage] = useState(null);  // This State is used to know which image is clicked and has to enlarged in the modal.\r\n\r\n    return(\r\n        <div className = \"App\">\r\n            <Title />\r\n            <UploadForm />\r\n            <ImageGrid setSelectedImage ={setSelectedImage}/>\r\n            { selectedImage && <Modal selectedImage = {selectedImage} setSelectedImage={setSelectedImage}/>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.querySelector('#root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}